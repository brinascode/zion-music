function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import renderHTML from 'react-render-html';

import Utils from '../utils/utils';

var AccordionContent = function (_Component) {
  _inherits(AccordionContent, _Component);

  function AccordionContent() {
    _classCallCheck(this, AccordionContent);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  AccordionContent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    return nextProps.isExpanded !== this.props.isExpanded;
  };

  AccordionContent.prototype.render = function render() {
    var Content = this.props.content;
    var isExpanded = this.props.isExpanded;


    return React.createElement(
      'div',
      {
        className: 'accordion__content',
        role: 'tabpanel',
        'aria-hidden': !isExpanded
      },
      Utils.isReactComponent(Content) ? React.createElement(Content, null) : renderHTML(Content)
    );
  };

  return AccordionContent;
}(Component);

export { AccordionContent as default };
;