function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

import AccordionContent from './accordion-content';
import AcorrdionHeader from './accordion-header';

var AccordionPanel = function (_Component) {
  _inherits(AccordionPanel, _Component);

  function AccordionPanel(props) {
    _classCallCheck(this, AccordionPanel);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.state = {
      checked: false
    };

    _this.handleAccordionHeaderClick = _this.handleAccordionHeaderClick.bind(_this);
    return _this;
  }

  AccordionPanel.prototype.handleAccordionHeaderClick = function handleAccordionHeaderClick() {
    this.setState({ checked: !this.state.checked });
  };

  AccordionPanel.prototype.render = function render() {
    return React.createElement(
      'div',
      { className: '' + (this.state.checked ? 'opened' : ''), id: this.props.id },
      React.createElement(AcorrdionHeader, { content: this.props.header, headerClick: this.handleAccordionHeaderClick, arrow: this.props.arrow }),
      React.createElement(AccordionContent, { content: this.props.content, isExpanded: this.state.checked })
    );
  };

  return AccordionPanel;
}(Component);

export { AccordionPanel as default };
AccordionPanel.propTypes = process.env.NODE_ENV !== "production" ? {
  header: PropTypes.any.isRequired,
  content: PropTypes.any.isRequired
} : {};